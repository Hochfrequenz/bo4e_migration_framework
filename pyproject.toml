[project]
name = "bomf"
description = "BO4E Migration Framework"
license = { text = "MIT" }
requires-python = ">=3.11"
authors = [{ name = "Hochfrequenz Unternehmensberatung GmbH", email = "info@hochfrequenz.de" }]
keywords = ["BO4E", "Migration", "Data"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "pydantic>=2.0.0",
    "typeguard",
    "frozendict",
    "bidict",
    "networkx",
    "injector",
    "python-generics",
    "pvframework"
]     # add all the dependencies here
dynamic = ["readme", "version"]

[project.optional-dependencies]
tests = [
    "pytest==8.3.3",
    "pytest-asyncio==0.24.0",
    "bo4e==202401.2.1"
]
linting = [
    "pylint==3.2.7"
]
type_check = [
    "mypy==1.11.2",
    "networkx-stubs==0.0.1",
    "types-frozendict==2.0.9"
]
spellcheck = [
    "codespell==2.3.0"
]
coverage = [
    "coverage==7.6.1"
]
formatting = [
    "black==24.8.0",
    "isort==5.13.2"
]
test_packaging = [
    "build==1.2.2",
    "twine==5.1.1"
]
dev = [
    "pip-tools"
]


[project.urls]
Changelog = "https://github.com/Hochfrequenz/bo4e_migration_framework/releases"
Homepage = "https://github.com/Hochfrequenz/bo4e_migration_framework"

[tool.black]
line-length = 120

[tool.isort]
line_length = 120
profile = "black"

[tool.pylint."MESSAGES CONTROL"]
max-line-length = 120
disable="fixme"

[mypy]
truethy-bool = true

[tool.mypy]
disable_error_code = []

[tool.pytest.ini_options]
# When the mode is auto, all discovered async tests are considered asyncio-driven
# even if they have no @pytest.mark.asyncio marker.
# https://github.com/pytest-dev/pytest-asyncio#auto-mode
asyncio_mode = "auto"

# the following lines are needed if you would like to build a python package
# and you want to use semantic versioning
[build-system]
requires = ["hatchling>=1.8.0", "hatch-vcs", "hatch-fancy-pypi-readme"]
build-backend = "hatchling.build"


[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/markdown"
fragments = [{ path = "README.md" }]

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/_bomf_version.py"
template = '''
version = "{version}"
'''

[tool.hatch.build.targets.sdist]
exclude = ["/unittests"]

[tool.hatch.build.targets.wheel]
only-include = ["src"]
sources = ["src"]